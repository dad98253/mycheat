\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename mycheat.info
@include version.texi
@settitle GNU Mycheat @value{VERSION}

@c Define a new index for options.
@defcodeindex op
@c Combine everything into one index (arbitrarily chosen to be the
@c concept index).
@syncodeindex op cp
@c %**end of header

@copying
Copyright @copyright{} 2025 John Kuras

@quotation
This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>
@end quotation
@end copying
@c If your manual is published on paper by the FSF, it should include
@c the standard FSF Front-Cover and Back-Cover Texts, as given in
@c maintain.texi.

@dircategory Math
@direntry
* Mycheat: (mycheat).               Finds the permutations of a string.
@end direntry

@titlepage
@title Mycheat
@subtitle for version @value{VERSION}, @value{UPDATED}
@author John Kuras (@email{w7og@@yahoo.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@ifnottex
@node Top
@top Mycheat

This manual is for Mycheat (version @value{VERSION}, @value{UPDATED}),
which prints every permutation of a string provided by the user.
@end ifnottex

@menu
* Overview::		General purpose and information.
* Sample output::	Sample output from @command{mycheat}.
* Invoking mycheat::	How to run @command{mycheat}.
* Reporting bugs::	Sending bug reports and feature suggestions.
* Free Documentation License:: Copying and sharing the application documentation.
* Concept index::	Index of concepts.
@end menu


@node Overview
@chapter Overview

@cindex greetings
@cindex overview

@command{mycheat} is a fast cgi program that finds the permutations of the characters
contained in a string and then passes the resulting strings through a spell checker
to identify which permutations are English words. When integrated into a web page, 
it allows non-mathematicians to use a classic computer algorithm to find words
contained in a scrambled string or characters.

@cindex joke, not
Not to spoil the joke, but of course the practical purpose of
@command{mycheat} is to serve as a tool that can be used to cheat at certain word
puzzles. (see examples)

@cindex author
@cindex Kuras, John
Mycheat was written by @w{dad} (John Kuras)

@node Sample output
@chapter Sample output

@cindex sample output
@cindex examples

Here are some examples of running Mycheat.

This is the output of the input @samp{ABC}:

@example
letters = ABC
ABC
CAB
@end example

The characters contained in the input string are not checked for duplicates.
Thus, if two identical characters are in the string, the algorithm will treat
each instance of the character as a separate member of the set. This will result
in duplicate words in the output:
This is the output of the input @samp{ABA}:

@example
letters = ABA
ABA
BAA
@end example

If such behavior is undesirable, the output may be piped through the Unix sort
and uniq commands. In addition, the header line that mycheat outputs is written 
to stderr. Thus, it can be eliminated by redirecting stderr:
This is the output of the command @samp{mycheat ABA -m 3 2>/dev/null | sort | uniq}:

@example
AAB
ABA
BAA
@end example

@cindex word game cheat

This is the output of the input @samp{FFERO}:

@example
Letters = FFERO
EFF
FER
FOE
FOR
FORE
FRO
OFF
OFFER
ORE
REF
ROE
@end example


@node Invoking mycheat
@chapter Invoking @command{mycheat}

@cindex invoking
@cindex options
@cindex usage
@cindex help

The format for running the @command{mycheat} program is:

@example
mycheat [@var{option}] @dots{} [ARGUMENT]
@end example

With no options or argument, @command{mycheat} expects to find two environment variables named
REQUEST_METHOD and CONTENT_LENGTH. These variables interface with fastcgi to communicate the
input from the web page form used to define the letters of the scrambled text to the mycheat
cgi program. REQUEST_METHOD must be set to "POST" and CONTENT_LENGTH must be set to the length
of the text line that mycheat will read from standard input. The line read in must begin with
"letters=" followed by the scrambled letters to be analyzed. Note that CONTENT_LENGTH is the
total length of this line including the "letters=" prefix. There must be at least 3 letters
to the right of the equal sign, and no more than 15 (unless you're using a supercomputer,
you'll probably want to keep this to 10 or less). Mycheat will analyze these words and write
the results as html to standard output.

@command{mycheat} supports the following options:

@table @option
@item --min-word-size=@var{N}
@itemx -m @var{N}
@opindex --min-word-size
@opindex -m
Ignore all outputs that are less than @var{N} characters in length (default 3).

@item --max-word-size=@var{N}
@itemx -x @var{N}
@opindex --max-word-size
@opindex -x
Ignore all outputs that are greater than @var{N} characters in length (default is the
length of the string).

@item --help
@itemx -?
@opindex --help
@opindex -?
Print an informative help message on standard output and exit
successfully.

@item --version
@itemx -v
@opindex --version
@opindex -v
Print the version number and licensing information of Mycheat on
standard output and then exit successfully.

@end table

Notes:

The number of permutations of the characters in the string (i.e., the
number of words to be spell checked) is O(n!), where n is the number of characters in the
string). Thus, the size of the output grows quickly with increasing string length.
There is a hard coded limit on the length of the input string of 15 characters.
On an Intel i5 processor from 2016, it takes mycheat 34 cpu seconds and 35 seconds wall
time to just to find the permutations of a 12 character string. This implies that it would take about 27
hours to find the permutations of a length 15 string. Note that these timings exclude the
time that the program needs to sort the permutations, eliminate duplicate entries, and look up the 
strings in the spell check dictionary. I.e., the
actual total wall time will be many times more than this. For long strings, the sort takes the
majority or the cpu and wall time. On the machine mentioned above, it will take up to ten
minutes to perform the permutation sort for a 12 character string (it varies depending
on the number of duplicate letters in the string). Thus, I recommend that you keep the number of
letters to 10 or less. If you should need to
use longer strings, I recommend using the permute utility (available at 
https://github.com/dad98253/permute) and pipe its output into sort and aspell similar to the following:

@example
permute -m 3 MYLONGSTRING |sort --parallel=4 --unique --buffer-size=16G >/tmp/in.txt; comm -23 /tmp/in.txt <(aspell list < /tmp/in.txt) 2>/dev/null
@end example

were MYLONGSTRING is the string that you want to unscramble. Set the the --parallel parameter
equal to the number of cores on your cpu and set the --buffer-size parameter to about half
the size of your installed RAM. The GNU sort utility is multi-threaded and uses a poly-phase
merge algorithm. It should run much faster than the single thread quick-sort used in mycheat.

The memory requirement for the permutation algorithm is roughly O(n**2)/2, where n is the length
of the string. However, to efficiently perform the spell check step, all permutations of the
letters are stored in memory. The total number of permuted strings will be the sum from m=3 to m=n
(where n is the number of characters) of n!/(n-m)! The length of each of these strings
will be m+1. Thus, the total memory needed to store these strings will be the sum from m=3 to m=n
of (n!/(n-m)!) x m. Some sample memory requirements as a function of n follow:

@example
    n          RAM requirement (bytes)
    3          18
    4          168
    5          1,260
    6          9,720
    7          82,110
    8          767,088
    9          7,891,128
   10          88,776,720
   11          1,085,050,890
   12          14,322,674,520
   13          203,121,569,508
   14          3,080,677,142,088
   15          49,764,784,608,630
@end example

So, by limiting the string length to 10 or less, memory requirements will be less than a
Gigabyte. 

Regarding mycheat arguments: If duplicate numerical options (@option{-m},
@option{-x}, and their long-named equivalents) are specified, whichever
comes last takes precedence. If both @option{-?} and @option{-v} (or their long-named equivalents)
are specified, whichever comes first takes precedence.

Normally, you will not be invoking mycheat directly as mentioned above. Instead, you will want to
invoke it from html being served by a web server such as apache or nginx. The following is
example html of how this might be accomplished. The following will display a form and a submit
button on a blank page. When the submit button is pressed, whatever is in the form box will
be sent to the fast cgi (mycheat.fcgi) program. The scaling used in the example is appropriate for my
particular cell phone. You will likely need to adjust the font, box, and button size to fit
your needs. The real work takes place in the <body> block near the bottom of the example.

@example
<head>
    <title>Sayang's cheat sheet</title>
<style>
  html @{
    font-size: 26px; /* Define a base font size for the root element */
  @}

  /* Style for the form label */
  .form-label @{
    font-size: 1.2rem; /* 1.2 times the root font size (e.g., 19.2px) */
    font-weight: bold;
    display: block; /* Ensures the label takes its own line */
    margin-bottom: 0.5rem;
  @}
    .submit-button @{
	min-width: 8rem;
        min-height: 2.5rem;
        font-size: 1.2rem;
        padding: 0.8rem 1.5rem;
        background-color: #4CAF50; /* Green */
        color: white;
	border: 1px solid #ccc;
        border-radius: 5px;
        cursor: pointer;
    @}

  /* Media query for smaller screens */
  @@media (max-width: 768px) @{
    html @{
      font-size: 64px; /* Reduce base font size for smaller screens */
    @}
    .form-label @{
      font-size: 2.1rem; /* Adjust label font size relative to new root font size */
    @}
  @}
    input[type="text"] @{
      font-size: 96px;
    @}
</style>
</head>
<body>
    <form method="POST" action="/cgi-bin/mycheat.fcgi">
        <label for="letters">Enter your letters:</label><br>
        <input type="text" id="letters" name="letters"><br><br>
        <input type="submit" value="Submit" class="submit-button">
    </form>
</body>
</html>
@end example


@node Reporting bugs
@chapter Reporting bugs

@cindex bug reporting
@cindex problems
@cindex reporting bugs

To report bugs, suggest enhancements or otherwise discuss Mycheat,
please send electronic mail to @email{w7og@@yahoo.com}.

@cindex checklist for bug reports
For bug reports, please include enough information for the maintainers
to reproduce the problem.  Generally speaking, that means:

@itemize @bullet
@item The version numbers of Mycheat (which you can find by running
      @w{@samp{mycheat.fcgi --version}}) and any other program(s) or
      file(s) involved.
@item Hardware and operating system names and versions.
@item The contents of any input files necessary to reproduce the bug.
@item The expected behavior and/or output.
@item A description of the problem and samples of any erroneous output.
@item If you compiled it yourself, any Options you gave to @command{configure} other than specifying installation directories.
@item Anything else that you think would be helpful.
@end itemize

When in doubt whether something is needed or not, include it.  It's
better to include too much than to leave out something important.

@cindex patches, contributing
Patches are welcome; if possible, please make them with @samp{@w{diff -c}}
and include @file{ChangeLog} entries.  Please follow the existing
coding style.

@node Free Documentation License
@appendix Mycheat Free Documentation License

@quotation
Note: Some of the C source in the mycheat application is based on AI
generated code. As of 2025, the copyright law regarding AI code is
being litigated. Should the law change, the copyright of the source
and the license that follows may become invalid.

This is free and unencumbered software released into the public domain.

Anyone is free to copy, modify, publish, use, compile, sell, or
distribute this software, either in source code form or as a compiled
binary, for any purpose, commercial or non-commercial, and by any
means.

In jurisdictions that recognize copyright laws, the author or authors
of this software dedicate any and all copyright interest in the
software to the public domain. We make this dedication for the benefit
of the public at large and to the detriment of our heirs and
successors. We intend this dedication to be an overt act of
relinquishment in perpetuity of all present and future rights to this
software under copyright law.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

For more information, please refer to <https://unlicense.org>
@end quotation


@node Concept index
@unnumbered Concept index

@printindex cp

@bye
